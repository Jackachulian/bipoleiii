{"version":3,"file":"main.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://my-webpack-project/./src/index.ts"],"sourcesContent":["// Stores the element that was last focused, incase focus is lost\nvar lastFocusedElement = null;\n// updates the last focused element, call when needed\nfunction updateLastFocusedElement() {\n    var activeElem = document.activeElement;\n    if (activeElem !== document.body && activeElem !== lastFocusedElement && activeElem instanceof HTMLElement)\n        lastFocusedElement = activeElem;\n}\n// update focus on clicks\ndocument.addEventListener(\"click\", function () {\n    updateLastFocusedElement();\n});\n// cursor movement between elements\ndocument.addEventListener(\"keydown\", function (evt) {\n    updateLastFocusedElement();\n    var activeElem = document.activeElement;\n    if (!activeElem || activeElem === document.body)\n        activeElem = lastFocusedElement;\n    if (!(activeElem instanceof HTMLElement))\n        return;\n    var axis = activeElem.getAttribute(\"axis\");\n    if (!axis)\n        axis = \"row\";\n    // Overflow. will be name of evt key if not handled, \"none\" if handled without overflow\n    var overflow = evt.code;\n    // Focus elements with arrow keys.\n    var nextElem = null;\n    if ((evt.code === \"ArrowLeft\" && axis === \"row\") || (evt.code === \"ArrowUp\" && axis === \"column\")) {\n        nextElem = activeElem.previousElementSibling;\n    }\n    else if ((evt.code === \"ArrowRight\" && axis === \"row\") || (evt.code === \"ArrowDown\" && axis === \"column\")) {\n        nextElem = activeElem.nextElementSibling;\n    }\n    // If cursor was moved and next element was found, no overflow\n    if (nextElem instanceof HTMLElement) {\n        overflow = \"none\";\n        tryFocus(nextElem);\n    }\n    // If cursor would cause overflow outside of element,\n    if (overflow !== \"none\") {\n        // check for overflow{evt.code}, if found, focus element with that id. ex. overflowArrowUp, overflowArrowLeft\n        var overflowAttributeName = \"overflow\" + overflow;\n        // check all parents of element for this tag\n        var parent_1 = activeElem;\n        while (parent_1) {\n            activeElem = parent_1;\n            if (!(activeElem instanceof HTMLElement))\n                break;\n            var overflowTo = activeElem.getAttribute(overflowAttributeName);\n            // if attribute was found, select element with id of value\n            if (overflowTo) {\n                tryFocusAll(document.getElementById(overflowTo));\n                break;\n            }\n            parent_1 = activeElem.parentElement;\n        }\n    }\n});\n// Focus an element. ADDITIONALLY, set last focusable element in case it is unfocused.\nfunction tryFocus(elem) {\n    elem.focus();\n    if (document.activeElement === elem) {\n        lastFocusedElement = elem;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n// Try to focus all child elements in this node. Once one is focused, stop\nfunction tryFocusAll(elem) {\n    // Try to focus this element\n    if (tryFocus(elem))\n        return true;\n    // Try on all child elements\n    for (var i = 0; i < elem.children.length; i++) {\n        // If element was successfully focused, stop checking\n        var child = elem.children[i];\n        if (child instanceof HTMLElement && tryFocusAll(child)) {\n            lastFocusedElement = child;\n            return true;\n        }\n    }\n    return false;\n}\n// Definitions\nfunction map() {\n    console.log(\"map\");\n}\nfunction deck() {\n    console.log(\"deck\");\n}\nfunction items() {\n    console.log(\"items\");\n}\n// DOCUMENT SETUP\n// button onclicks\ndocument.getElementById(\"choice_map\").onclick = map;\ndocument.getElementById(\"choice_deck\").onclick = deck;\ndocument.getElementById(\"choice_items\").onclick = items;\n// select first selectable in output\ntryFocusAll(document.getElementById(\"output\"));\n"],"names":[],"sourceRoot":""}